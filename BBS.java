package crypto;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Scanner;

/**
 * Blum-Blum-Shub (BBS) psuedorandom number generator in pure Java.
 * 
 * @author Chris Lattman
 */
public class BBS {

    /**
     * The Blum-Blum-Shub (BBS) pseudorandom number generator.
     * 
     * @param args not used
     */
    public static void main(String[] args) {
        /*
         * Primes p and q are chosen such that they are of the form 4k + 3,
         * which means that the two rightmost (lowest-order) bits should be 
         * set to 1.
         */
        SecureRandom random = new SecureRandom();
        BigInteger p = BigInteger.probablePrime(512, random);
        BigInteger q = BigInteger.probablePrime(512, random);
        while (!p.testBit(0) || !p.testBit(1)) {
            p = BigInteger.probablePrime(512, random);
        }
        while (p.equals(q) || !q.testBit(0) || !q.testBit(1)) {
            q = BigInteger.probablePrime(512, random);
        }
        
        /*
         * n = p * q
         * 
         * x must be relatively prime to n
         * 
         * Since x must be invertible under multiplication mod n, it suffices
         * to choose x to be a probable prime less than n.
         */
        BigInteger n = p.multiply(q);
        BigInteger x = BigInteger.probablePrime(512, random);
        while (x.compareTo(n.subtract(BigInteger.ONE)) > 0) {
            x = BigInteger.probablePrime(512, random);
        }
        
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter how many random bits you would like: ");
        int bits = scanner.nextInt();
        scanner.close();
        
        /*
         * The BBS algorithm. Bits, stored in b, are generated by squaring x
         * mod n, isolating the lowest-order bit of x, and setting b's 
         * current index bit to x's isolated bit value.
         */
        BigInteger b = BigInteger.ZERO;
        for (int i = 0; i < bits; i++) {
            x = x.modPow(BigInteger.TWO, n);
            if (x.testBit(0)) {
                b = b.setBit(i);
            }
        }
        System.out.println("Random number: " + b.toString(16));
    }
}
