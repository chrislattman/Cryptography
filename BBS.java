package crypto;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Scanner;

/**
 * Blum-Blum-Shub (BBS) pseudorandom number generator in pure Java.
 * 
 * @author Chris Lattman
 */
public class BBS {

    /**
     * The Blum-Blum-Shub (BBS) pseudorandom number generator.
     * 
     * @param args not used
     */
    public static void main(String[] args) {
        /*
         * Primes p and q are chosen such that they are of the form 4k + 3,
         * which means that the two rightmost (lowest-order) bits should be 
         * set to 1.
         */
        SecureRandom random = new SecureRandom();
        BigInteger p = BigInteger.probablePrime(1024, random);
        BigInteger q = BigInteger.probablePrime(1024, random);
        while (!p.testBit(0) || !p.testBit(1)) {
            p = BigInteger.probablePrime(1024, random);
        }
        while (p.equals(q) || !q.testBit(0) || !q.testBit(1)) {
            q = BigInteger.probablePrime(1024, random);
        }
        
        /*
         * n = p * q is computed
         * 
         * x must be relatively prime to n
         * 
         * Since x must be invertible under multiplication mod n, it suffices
         * to choose x to be a random number less than n not equal to p or q.
         */
        BigInteger n = p.multiply(q);
        BigInteger x = new BigInteger(2048, random);
        while (x.compareTo(n) >= 0 || x.equals(p) || x.equals(q)) {
            x = new BigInteger(2048, random);
        }
        
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter how many random bits you would like: ");
        try {
            String bitsString = scanner.next().replaceAll("[^0-9]", "");
            int bits = Integer.parseInt(bitsString);
            
            /*
             * The BBS algorithm. Bits, stored in b, are generated by squaring x
             * mod n, isolating the lowest-order bit of x, and setting b's 
             * current index bit to x's isolated bit value.
             */
            BigInteger b = BigInteger.ZERO;
            for (int i = 0; i < bits; i++) {
                x = x.modPow(BigInteger.TWO, n);
                if (x.testBit(0)) {
                    b = b.setBit(i);
                }
            }
            System.out.println("Random number: " + b.toString(16));
        }
        catch (Exception e) {
            System.out.println("Invalid input.");
        }
        scanner.close();
    }
}
