package crypto;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.spec.ECGenParameterSpec;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * A rudimentary Transport Layer Security (TLS) session in pure Java, as
 * described on p.462 of Cryptography: Theory and Practice, 4th Edition (2019).
 * 
 * @author Chris Lattman
 */
public class TLS {
    /**
     * A basic TLS session without a trusted certificate authority.
     * 
     * @param args not used
     * @throws Exception a whole host of exceptions can be thrown, although
     *                   they are all non-issues in this implementation
     */
    public static void main(String[] args) throws Exception {
        /*
         * The client and the server initiate the session by introducing
         * themselves. I know this is idiotic; I'm just trying to follow 
         * protocol here.
         * 
         * In real TLS, this is where the client and the server agree upon
         * what encryption schemes are used. This implementation chooses
         * ECDSA to sign the public key, AES to share the master secret, and
         * SHA-512 to generate the two secret encryption and HMAC keys.
         */
        System.out.println("Hi server, I'm the client.");
        System.out.println("Hi client, I'm the server.");
        
        /*
         * A random key pair for secp256r1 is generated
         */
        ECGenParameterSpec ecGen = new ECGenParameterSpec("secp256r1");
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("EC");
        SecureRandom random = new SecureRandom();
        keyPairGen.initialize(ecGen, random);
        KeyPair keyPair = keyPairGen.generateKeyPair();
        
        /*
         * The ECDSA signature algorithm is used to sign the message. Here, 
         * the message is a randomly generated 256-bit public key. The server
         * sends the signed public key to the client.
         */
        Signature ecSign = Signature.getInstance("SHA256withECDSA");
        ecSign.initSign(keyPair.getPrivate());
        BigInteger publicKey = BigInteger.ZERO;
        while (publicKey.toByteArray().length != 32) {
            publicKey = new BigInteger(256, random);
        }
        ecSign.update(publicKey.toByteArray());
        BigInteger signature = new BigInteger(1, ecSign.sign());
        System.out.println("public key: " + publicKey.toString(16));
        System.out.println("signature: " + signature.toString(16));
        
        /*
         * The signed public key is then verified by the client. If it
         * verifies, the client generates a master secret and encrypts it with
         * AES, using the server's public key as the AES key.
         */
        ecSign.initVerify(keyPair.getPublic());
        ecSign.update(publicKey.toByteArray());
        boolean result = ecSign.verify(signature.toByteArray());
        if (result) {
            System.out.println("Signature is verified.");
            
            /*
             * cipher is an instance of 256-bit AES with CBC mode and PKCS5 
             * padding, the block cipher used by TLS
             * 
             * It is initialized to encrypt data using the public key and an
             * initialization vector iv of {0} for AES's CBC mode.
             */
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            byte[] iv = new byte[16];
            IvParameterSpec ivspec = new IvParameterSpec(iv);
            SecretKeySpec aesKey = new SecretKeySpec(publicKey.toByteArray(), 
                "AES");
            cipher.init(Cipher.ENCRYPT_MODE, aesKey, ivspec);
            
            /*
             * The master secret is generated by the client, encrypted, and 
             * then sent to the server.
             */
            BigInteger masterSecret = new BigInteger(512, random);
            byte[] encrypted = cipher.doFinal(masterSecret.toByteArray());
            String ciphertext = Base64.getEncoder().encodeToString(encrypted);
            System.out.println("ciphertext: " + ciphertext);
            
            /*
             * The server decrypts the master secret and then generates the 
             * encryption key and the HMAC key using a key derivation function 
             * (KDF), which is simply a cryptographic hash function. 
             * 
             * Here, SHA-512 is used to generate 2 256-bit keys by producing a
             * message digest of the master secret.
             * 
             * The client can also generate these keys since they generated 
             * the master secret in the first place.
             */
            cipher.init(Cipher.DECRYPT_MODE, aesKey, ivspec);
            byte[] cipherTextBytes = Base64.getDecoder().decode(ciphertext);
            byte[] masterSecretBytes = cipher.doFinal(cipherTextBytes);
            MessageDigest hash = MessageDigest.getInstance("SHA-512");
            byte[] keys = hash.digest(masterSecretBytes);
            byte[] enckeybytes = new byte[32];
            byte[] mackeybytes = new byte[32];
            for (int i = 0; i < 32; i++) {
                enckeybytes[i] = keys[i];
            }
            for (int j = 0; j < 32; j++) {
                mackeybytes[j] = keys[j + 32];
            }
            BigInteger encrypt = new BigInteger(1, enckeybytes);
            BigInteger hmac = new BigInteger(1, mackeybytes);
            
            /*
             * The encryption key and HMAC keys are printed for demonstration 
             * only. This should NEVER be done in practice.
             * 
             * In real TLS, ciphertexts are sent between the client and the
             * server (encrypted with these secret keys) to verify that they
             * share the same keys. If successful, all future communications
             * between them during the session are encrypted using these keys.
             */
            System.out.println("shared encryption key: " + 
                encrypt.toString(16));
            System.out.println("shared HMAC key: " + hmac.toString(16));
        }
        else {
            System.out.println("Signature is not verified.");
        }
    }
}
